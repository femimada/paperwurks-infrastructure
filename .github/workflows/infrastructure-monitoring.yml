name: Infrastructure Status Check

on:
  schedule:
    # Runs daily at 9am UTC. Add a comment for clarity.
    - cron: "0 9 * * *"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  issues: write # To create an issue if costs are high

jobs:
  check-status:
    name: Check Running Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/paperwurks-terraform-role
          aws-region: eu-west-2

      - name: Check Running Resources
        id: resources
        run: |
          echo "##  Infrastructure Status Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check ECS clusters
          echo "### ECS Clusters" >> $GITHUB_STEP_SUMMARY
          clusters=$(aws ecs list-clusters --query 'clusterArns[]' --output text)
          if [ -z "$clusters" ]; then
            echo "- No running ECS clusters found." >> $GITHUB_STEP_SUMMARY
          else
            echo "$clusters" | while read cluster; do
              if [ ! -z "$cluster" ]; then
                name=$(basename $cluster)
                tasks=$(aws ecs list-tasks --cluster $cluster --query 'taskArns | length(@)')
                echo "- **$name**: $tasks running tasks" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi

          # Check RDS instances (with improved formatting)
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### RDS Instances" >> $GITHUB_STEP_SUMMARY
          instances=$(aws rds describe-db-instances --query 'DBInstances[*].[DBInstanceIdentifier,DBInstanceStatus,DBInstanceClass]' --output text)
          if [ -z "$instances" ]; then
            echo "- No running RDS instances found." >> $GITHUB_STEP_SUMMARY
          else
            echo "$instances" | while read -r id status type; do
              if [ ! -z "$id" ]; then
                echo "- **$id**: Status is \`$status\`, Instance Type is \`$type\`" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi

          # Check NAT Gateways (expensive!)
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### NAT Gateways (£32/month each)" >> $GITHUB_STEP_SUMMARY
          nat_count=$(aws ec2 describe-nat-gateways --filter "Name=state,Values=available" --query 'NatGateways | length(@)')
          echo "- **Active NAT Gateways**: $nat_count" >> $GITHUB_STEP_SUMMARY
          echo "nat_count=$nat_count" >> $GITHUB_OUTPUT

      - name: Get Actual AWS Costs
        id: costs
        run: |
          # Get actual costs for the last 7 days and project to a monthly average
          start_date=$(date -d '7 days ago' +%Y-%m-%d)
          end_date=$(date +%Y-%m-%d)

          # Use || true to prevent the step from failing if awk has no input (i.e., zero cost)
          actual_cost=$(aws ce get-cost-and-usage \
            --time-period Start=$start_date,End=$end_date \
            --granularity DAILY \
            --metrics BlendedCost \
            --query 'ResultsByTime[*].Total.BlendedCost.Amount' \
            --output text | awk '{sum+=$1} END {printf "%.2f", sum/7*30}' || true)

          # Set a default value if the command returns an empty string
          actual_cost=${actual_cost:-0.00}

          echo "### Actual AWS Costs" >> $GITHUB_STEP_SUMMARY
          echo "**Last 7 days average (projected monthly)**: £${actual_cost}" >> $GITHUB_STEP_SUMMARY

          # Make the cost available to subsequent steps
          echo "actual_cost=$actual_cost" >> $GITHUB_OUTPUT

      - name: Alert if Unexpected Resources
        if: steps.resources.outputs.nat_count > 0
        run: |
          echo "  Found running infrastructure that may incur costs (NAT Gateways)!"
          echo " Consider running the cleanup workflow if this is not expected."

      - name: Create Issue if Costs High
        if: steps.resources.outputs.nat_count > 2
        uses: actions/github-script@v7
        with:
          script: |
            // Correctly perform calculations inside JavaScript
            const natCount = ${{ steps.resources.outputs.nat_count }};
            const estimatedNatCost = natCount * 32;
            const actualCost = ${{ steps.costs.outputs.actual_cost }};
            const title = '⚠️ High Infrastructure Costs Detected';

            const body = `## Infrastructure Cost Alert
            The daily status check found more infrastructure running than expected, leading to higher costs.
            ### Summary
            - **NAT Gateways**: **${natCount}** (Expected: 0-2)
            - **Estimated NAT Cost**: £${estimatedNatCost}/month
            - **Recent Avg. Monthly Cost**: £${actualCost} (based on last 7 days)
            ### Action Required
            1. Review the running resources in the [latest workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).
            2. If this infrastructure is not needed, run the **[Emergency Cleanup workflow](../../actions/workflows/cleanup.yaml)**.

            cc @devops-team`;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['infrastructure', 'costs', 'alert']
            });
