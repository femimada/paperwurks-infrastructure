name: Infrastructure Test (Create, Test, Destroy)

on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      environments:
        type: choice
        description: 'Which environments to test'
        options:
          - all
          - dev
          - staging
          - production
        default: 'all'
      destroy_existing:
        type: boolean
        description: 'Destroy existing environments after testing'
        default: false

permissions:
  id-token: write
  contents: read
  issues: write

env:
  AWS_REGION: eu-west-2

jobs:
  test-dev:
    name: Test Dev Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.environments == 'all' || github.event.inputs.environments == 'dev'
    environment: dev
    outputs:
      status: ${{ steps.test.outputs.status }}
      was_created: ${{ steps.check-exists.outputs.created }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/paperwurks-terraform-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Check if Environment Exists
        id: check-exists
        working-directory: environments/dev
        run: |
          echo "Checking if dev environment exists..."
          
          if aws ecs describe-clusters --clusters dev-paperwurks-cluster --query 'clusters[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "created=false" >> $GITHUB_OUTPUT
            echo "Dev environment already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "created=true" >> $GITHUB_OUTPUT
            echo "Dev environment does not exist - will create"
          fi

      - name: Terraform Init
        working-directory: environments/dev
        run: terraform init

      - name: Create Environment
        if: steps.check-exists.outputs.exists == 'false'
        id: create
        working-directory: environments/dev
        run: |
          echo "Creating dev environment..."
          echo "This will take approximately 10-15 minutes"
          
          terraform apply -auto-approve -no-color | tee apply.log
          
          if [ $? -eq 0 ]; then
            echo "Environment created successfully"
            echo "create_success=true" >> $GITHUB_OUTPUT
          else
            echo "Environment creation failed"
            echo "create_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Wait for Environment Stabilization
        if: steps.check-exists.outputs.exists == 'false' && steps.create.outputs.create_success == 'true'
        run: |
          echo "Waiting 5 minutes for environment to stabilize..."
          sleep 300

      - name: Test Infrastructure
        id: test
        working-directory: environments/dev
        run: |
          echo "Testing Dev Environment..."
          
          # Test 1: Networking
          echo "::group::Networking Layer"
          VPC_ID=$(terraform output -raw vpc_id)
          echo "VPC ID: $VPC_ID"
          
          PRIVATE_SUBNETS=$(terraform output -json private_subnet_ids | jq -r 'length')
          echo "Private Subnets: $PRIVATE_SUBNETS"
          
          if [ "$PRIVATE_SUBNETS" -lt "3" ]; then
            echo "ERROR: Expected 3 private subnets, got $PRIVATE_SUBNETS"
            echo "networking_error=true" >> $GITHUB_ENV
          fi
          
          NAT_COUNT=$(terraform output -json nat_gateway_public_ips | jq -r 'length')
          echo "NAT Gateways: $NAT_COUNT"
          echo "::endgroup::"
          
          # Test 2: Compute
          echo "::group::Compute Layer"
          CLUSTER="dev-paperwurks-cluster"
          SERVICE="dev-paperwurks-backend"
          
          CLUSTER_STATUS=$(aws ecs describe-clusters --clusters $CLUSTER --query 'clusters[0].status' --output text)
          echo "Cluster Status: $CLUSTER_STATUS"
          
          if [ "$CLUSTER_STATUS" != "ACTIVE" ]; then
            echo "ERROR: Cluster not active"
            echo "compute_error=true" >> $GITHUB_ENV
          fi
          
          RUNNING=$(aws ecs describe-services --cluster $CLUSTER --services $SERVICE --query 'services[0].runningCount' --output text)
          DESIRED=$(aws ecs describe-services --cluster $CLUSTER --services $SERVICE --query 'services[0].desiredCount' --output text)
          echo "Tasks: $RUNNING/$DESIRED running"
          
          if [ "$RUNNING" != "$DESIRED" ]; then
            echo "WARNING: Not all tasks running (may be starting)"
            echo "tasks_warning=true" >> $GITHUB_ENV
          fi
          
          ALB_DNS=$(terraform output -raw alb_dns_name)
          echo "ALB DNS: $ALB_DNS"
          
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://$ALB_DNS --max-time 10 || echo "000")
          echo "ALB HTTP Response: $HTTP_CODE"
          echo "::endgroup::"
          
          # Test 3: Database
          echo "::group::Database Layer"
          DB_ENDPOINT=$(terraform output -raw rds_endpoint)
          echo "RDS Endpoint: $DB_ENDPOINT"
          
          DB_STATUS=$(aws rds describe-db-instances \
            --db-instance-identifier paperwurks-dev-db \
            --query 'DBInstances[0].DBInstanceStatus' \
            --output text)
          echo "RDS Status: $DB_STATUS"
          
          if [ "$DB_STATUS" != "available" ]; then
            echo "ERROR: Database is not available: $DB_STATUS"
            echo "db_error=true" >> $GITHUB_ENV
          fi
          echo "::endgroup::"
          
          # Test 4: Storage
          echo "::group::Storage Layer"
          DOCS_BUCKET=$(terraform output -raw documents_bucket_name)
          if aws s3 ls s3://$DOCS_BUCKET > /dev/null 2>&1; then
            echo "Documents Bucket: $DOCS_BUCKET"
            
            echo "test-content" > test-file.txt
            if aws s3 cp test-file.txt s3://$DOCS_BUCKET/test/test-file.txt; then
              echo "Bucket write test: PASSED"
              
              if aws s3 cp s3://$DOCS_BUCKET/test/test-file.txt test-downloaded.txt; then
                echo "Bucket read test: PASSED"
                rm test-file.txt test-downloaded.txt
                aws s3 rm s3://$DOCS_BUCKET/test/test-file.txt
              else
                echo "ERROR: Bucket read test FAILED"
                echo "storage_error=true" >> $GITHUB_ENV
              fi
            else
              echo "ERROR: Bucket write test FAILED"
              echo "storage_error=true" >> $GITHUB_ENV
            fi
          else
            echo "ERROR: Documents Bucket NOT ACCESSIBLE"
            echo "storage_error=true" >> $GITHUB_ENV
          fi
          echo "::endgroup::"
          
          # Test 5: Monitoring
          echo "::group::Monitoring Layer"
          LOG_GROUP=$(terraform output -raw application_log_group)
          if aws logs describe-log-groups --log-group-name-prefix $LOG_GROUP > /dev/null 2>&1; then
            echo "Log Group: $LOG_GROUP"
          else
            echo "ERROR: Log Group NOT FOUND"
            echo "monitoring_error=true" >> $GITHUB_ENV
          fi
          
          SNS_TOPIC=$(terraform output -raw sns_alerts_topic_arn)
          echo "SNS Topic: ${SNS_TOPIC##*/}"
          
          if aws sns publish \
            --topic-arn $SNS_TOPIC \
            --subject "Test Alert" \
            --message "Infrastructure test alert from workflow" > /dev/null 2>&1; then
            echo "SNS publish test: PASSED"
          else
            echo "WARNING: SNS publish test FAILED"
          fi
          echo "::endgroup::"
          
          # Summary
          echo ""
          echo "Test Summary"
          echo "============================================"
          
          FAILED_TESTS=""
          [ -n "$networking_error" ] && FAILED_TESTS="$FAILED_TESTS networking"
          [ -n "$compute_error" ] && FAILED_TESTS="$FAILED_TESTS compute"
          [ -n "$db_error" ] && FAILED_TESTS="$FAILED_TESTS database"
          [ -n "$storage_error" ] && FAILED_TESTS="$FAILED_TESTS storage"
          [ -n "$monitoring_error" ] && FAILED_TESTS="$FAILED_TESTS monitoring"
          
          if [ -n "$FAILED_TESTS" ]; then
            echo "FAILED tests:$FAILED_TESTS"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          elif [ -n "$tasks_warning" ]; then
            echo "Tests passed with warnings"
            echo "status=warning" >> $GITHUB_OUTPUT
          else
            echo "All tests passed successfully"
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Generate Test Report
        if: always()
        run: |
          cat << EOF > dev-test-report.md
          ## Dev Environment Test Report
          
          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Environment:** ${{ steps.check-exists.outputs.exists == 'false' && 'Created by workflow' || 'Pre-existing' }}
          **Status:** ${{ steps.test.outputs.status || 'error' }}
          
          ### Test Results
          
          | Layer | Status |
          |-------|--------|
          | Networking | ${{ env.networking_error && 'FAILED' || 'PASSED' }} |
          | Compute | ${{ env.compute_error && 'FAILED' || env.tasks_warning && 'WARNING' || 'PASSED' }} |
          | Database | ${{ env.db_error && 'FAILED' || 'PASSED' }} |
          | Storage | ${{ env.storage_error && 'FAILED' || 'PASSED' }} |
          | Monitoring | ${{ env.monitoring_error && 'FAILED' || 'PASSED' }} |
          
          ### Actions Taken
          
          - Environment existed: ${{ steps.check-exists.outputs.exists }}
          - Created by workflow: ${{ steps.check-exists.outputs.created }}
          - Will be destroyed: ${{ (steps.check-exists.outputs.created == 'true' || github.event.inputs.destroy_existing == 'true') && 'Yes' || 'No' }}
          
          EOF
          
          cat dev-test-report.md >> $GITHUB_STEP_SUMMARY

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dev-test-report
          path: dev-test-report.md

      - name: Destroy Environment
        if: always() && (steps.check-exists.outputs.created == 'true' || github.event.inputs.destroy_existing == 'true')
        working-directory: environments/dev
        run: |
          echo "Destroying dev environment..."
          
          if [ "${{ steps.check-exists.outputs.created }}" = "true" ]; then
            echo "Reason: Created by this workflow"
          else
            echo "Reason: Manual destroy requested"
          fi
          
          terraform destroy -auto-approve -no-color | tee destroy.log
          
          if [ $? -eq 0 ]; then
            echo "Environment destroyed successfully"
          else
            echo "ERROR: Environment destruction failed - manual cleanup may be required"
            exit 1
          fi

  test-staging:
    name: Test Staging Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.environments == 'all' || github.event.inputs.environments == 'staging'
    environment: staging
    outputs:
      status: ${{ steps.test.outputs.status }}
      was_created: ${{ steps.check-exists.outputs.created }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/paperwurks-terraform-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Check if Environment Exists
        id: check-exists
        working-directory: environments/staging
        run: |
          echo "Checking if staging environment exists..."
          
          if aws ecs describe-clusters --clusters staging-paperwurks-cluster --query 'clusters[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "created=false" >> $GITHUB_OUTPUT
            echo "Staging environment already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "created=true" >> $GITHUB_OUTPUT
            echo "Staging environment does not exist - will create"
          fi

      - name: Terraform Init
        working-directory: environments/staging
        run: terraform init

      - name: Create Environment
        if: steps.check-exists.outputs.exists == 'false'
        id: create
        working-directory: environments/staging
        run: |
          echo "Creating staging environment..."
          echo "This will take approximately 10-15 minutes"
          
          terraform apply -auto-approve -no-color | tee apply.log
          
          if [ $? -eq 0 ]; then
            echo "Environment created successfully"
            echo "create_success=true" >> $GITHUB_OUTPUT
          else
            echo "Environment creation failed"
            echo "create_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Wait for Environment Stabilization
        if: steps.check-exists.outputs.exists == 'false' && steps.create.outputs.create_success == 'true'
        run: |
          echo "Waiting 5 minutes for environment to stabilize..."
          sleep 300

      - name: Test Infrastructure
        id: test
        working-directory: environments/staging
        run: |
          echo "Testing Staging Environment..."
          
          CLUSTER="staging-paperwurks-cluster"
          
          CLUSTER_STATUS=$(aws ecs describe-clusters --clusters $CLUSTER --query 'clusters[0].status' --output text)
          echo "Cluster Status: $CLUSTER_STATUS"
          
          if [ "$CLUSTER_STATUS" = "ACTIVE" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Destroy Environment
        if: always() && (steps.check-exists.outputs.created == 'true' || github.event.inputs.destroy_existing == 'true')
        working-directory: environments/staging
        run: |
          echo "Destroying staging environment..."
          terraform destroy -auto-approve -no-color

  test-production:
    name: Test Production Environment
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule' && (github.event.inputs.environments == 'all' || github.event.inputs.environments == 'production')
    environment: production
    outputs:
      status: ${{ steps.test.outputs.status }}
      was_created: ${{ steps.check-exists.outputs.created }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/paperwurks-terraform-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Production Safety Check
        run: |
          echo "WARNING: PRODUCTION ENVIRONMENT TEST"
          echo "============================================"
          echo ""
          echo "This workflow will:"
          echo "  - Check if production exists"
          echo "  - Create if it doesn't exist (ONLY if manually triggered)"
          echo "  - Test infrastructure"
          echo "  - Destroy ONLY if: created by this workflow OR destroy_existing=true"
          echo ""
          echo "Production is NEVER destroyed by scheduled runs"
          echo ""
          
          if [ "${{ github.event.inputs.destroy_existing }}" = "true" ]; then
            echo "WARNING: You have requested to destroy production after testing"
            echo "Waiting 30 seconds... Press Ctrl+C to cancel"
            sleep 30
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Check if Environment Exists
        id: check-exists
        working-directory: environments/prod
        run: |
          echo "Checking if production environment exists..."
          
          if aws ecs describe-clusters --clusters prod-paperwurks-cluster --query 'clusters[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "created=false" >> $GITHUB_OUTPUT
            echo "Production environment exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "created=true" >> $GITHUB_OUTPUT
            echo "Production does not exist - will create"
          fi

      - name: Terraform Init
        working-directory: environments/prod
        run: terraform init

      - name: Create Environment
        if: steps.check-exists.outputs.exists == 'false'
        id: create
        working-directory: environments/prod
        run: |
          echo "Creating production environment..."
          echo "This will take approximately 15-20 minutes (Multi-AZ RDS)"
          
          terraform apply -auto-approve -no-color | tee apply.log
          
          if [ $? -eq 0 ]; then
            echo "Production created successfully"
            echo "create_success=true" >> $GITHUB_OUTPUT
          else
            echo "Production creation failed"
            echo "create_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Wait for Environment Stabilization
        if: steps.check-exists.outputs.exists == 'false' && steps.create.outputs.create_success == 'true'
        run: |
          echo "Waiting 10 minutes for production to stabilize (Multi-AZ)..."
          sleep 600

      - name: Test Infrastructure
        id: test
        working-directory: environments/prod
        run: |
          echo "Testing Production Environment..."
          
          CLUSTER="prod-paperwurks-cluster"
          
          # Verify Multi-AZ RDS
          MULTI_AZ=$(aws rds describe-db-instances \
            --db-instance-identifier paperwurks-prod-db \
            --query 'DBInstances[0].MultiAZ' \
            --output text)
          
          echo "Multi-AZ: $MULTI_AZ"
          
          if [ "$MULTI_AZ" != "True" ]; then
            echo "ERROR: Production MUST be Multi-AZ"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Verify dual NAT
          NAT_COUNT=$(terraform output -json nat_gateway_public_ips | jq -r 'length')
          echo "NAT Gateways: $NAT_COUNT"
          
          if [ "$NAT_COUNT" -lt "2" ]; then
            echo "WARNING: Production should have 2 NAT Gateways"
          fi
          
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Destroy Environment (Conditional)
        if: always() && steps.check-exists.outputs.created == 'true' && github.event.inputs.destroy_existing != 'true'
        working-directory: environments/prod
        run: |
          echo "Destroying production (created by workflow)..."
          terraform destroy -auto-approve -no-color

      - name: Destroy Existing Production (Manual Override)
        if: always() && github.event.inputs.destroy_existing == 'true'
        working-directory: environments/prod
        run: |
          echo "Destroying EXISTING production (manual override)..."
          echo "WARNING: THIS WAS MANUALLY REQUESTED"
          terraform destroy -auto-approve -no-color

      - name: Production Preserved
        if: always() && steps.check-exists.outputs.created == 'false' && github.event.inputs.destroy_existing != 'true'
        run: |
          echo "Production environment preserved (pre-existing)"
          echo "Production is never destroyed by scheduled runs"

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-dev, test-staging, test-production]
    if: always()
    
    steps:
      - name: Generate Summary
        run: |
          echo "# Infrastructure Test Summary (Create, Test, Destroy)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "**Mode:** ${{ github.event_name == 'schedule' && 'Scheduled' || 'Manual' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Test Status | Created | Destroyed |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|-------------|---------|-----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dev | ${{ needs.test-dev.outputs.status || 'skipped' }} | ${{ needs.test-dev.outputs.was_created }} | ${{ needs.test-dev.outputs.was_created == 'true' && 'Yes' || 'No' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Staging | ${{ needs.test-staging.outputs.status || 'skipped' }} | ${{ needs.test-staging.outputs.was_created }} | ${{ needs.test-staging.outputs.was_created == 'true' && 'Yes' || 'No' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Production | ${{ needs.test-production.outputs.status || 'skipped' }} | ${{ needs.test-production.outputs.was_created }} | ${{ needs.test-production.outputs.was_created == 'true' && 'Yes' || 'No' }} |" >> $GITHUB_STEP_SUMMARY
